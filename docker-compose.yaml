version: "3.8"

services:
  postgres:
    container_name: postgres
    image: postgres:12.2-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./db:/data/db
    ports:
      - "${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER} || exit 1",
        ]
      interval: 5s
      timeout: 3s
    networks:
      - dock-net

  api:
    container_name: api
    tty: true
    restart: on-failure
    build:
      context: ./api
      args:
        DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
    environment:
      - API_PORT=${API_PORT:-3004}
      - ENVIRONMENT=${ENVIRONMENT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_URL=${BACKEND_URL}
      - TESTING=${TESTING}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_SERVICE=${POSTGRES_SERVICE}
    networks:
      - dock-net
    ports:
      - ${API_PORT:-3004}:${API_PORT:-3004}
    healthcheck:
      test: curl localhost:${API_PORT:-3004}/api/health | grep 'API running'
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy

networks:
  dock-net:
    driver: "bridge"
